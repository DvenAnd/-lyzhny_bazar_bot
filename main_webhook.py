"""
Telegram –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ (Render + webhooks, aiogram v3).

–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    pip install -r requirements.txt

–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –≤–µ–±—Ö—É–∫–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ Render):
    python main_webhook.py

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (Render):
1) –í Render —Å–æ–∑–¥–∞–π—Ç–µ Web Service –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —ç—Ç–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.
2) –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Environment):
   - BOT_TOKEN   = <–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞>
   - ADMIN_ID    = 919732599                 # –ª–∏–±–æ ADMIN_IDS = 919732599,111222333
   - CHANNEL_ID  = @lyzhny_bazar             # –º–æ–∂–Ω–æ @username –∏–ª–∏ -100xxxxxxxxxx
   - WEBHOOK_URL = https://lyzhny-bazar-bot.onrender.com/telegram
   - (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) WEBHOOK_SECRET = <—Å–ª—É—á–∞–π–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram
3) Build Command:   pip install -r requirements.txt
   Start Command:   python main_webhook.py
4) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.
5) –í–µ–±—Ö—É–∫ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (setWebhook).

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º).
- –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(–∞–º).
- –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (Inline): ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å / ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å.
- –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª.
- –ë–µ–∑ –ë–î ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.

–û–±—Ä–∞–∑–µ—Ü –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start (–≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é):

üìù –û–±—Ä–∞–∑–µ—Ü –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ü—Ä–æ–¥–∞–∂–∞ –ª—ã–∂ Fischer Speedmax 3D Skate
–û–ø–∏—Å–∞–Ω–∏–µ:
–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É, –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
–†–∞–∑–º–µ—Ä: 186 —Å–º
–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: 2022
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫—Ä–µ–ø–ª–µ–Ω–∏—è Rottefella Xcelerator
–¶–µ–Ω–∞: 25 000 ‚ÇΩ
–ê–¥—Ä–µ—Å: –î–º–∏—Ç—Ä–æ–≤
–ö–æ–Ω—Ç–∞–∫—Ç—ã: @username –∏–ª–∏ +7 912 345-67-89
–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: [–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ 3-—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ]
"""

import asyncio
import os
import uuid
from typing import Dict, List, Optional, Tuple

from aiohttp import web
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaPhoto,
    InputMediaVideo,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# ---------------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤: ADMIN_ID –∏–ª–∏ ADMIN_IDS="1,2,3"
_admin_ids_env = os.getenv("ADMIN_IDS", os.getenv("ADMIN_ID", "")).strip()
ADMIN_IDS: List[int] = []
if _admin_ids_env:
    for part in _admin_ids_env.split(","):
        part = part.strip()
        if part:
            try:
                ADMIN_IDS.append(int(part))
            except ValueError:
                pass
if not ADMIN_IDS:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω ADMIN_ID/ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

CHANNEL_ID_RAW = os.getenv("CHANNEL_ID", "").strip()
if not CHANNEL_ID_RAW:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω CHANNEL_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
CHANNEL_ID = CHANNEL_ID_RAW  # –º–æ–∂–µ—Ç –±—ã—Ç—å @username –∏–ª–∏ -100XXXXXXXXXX

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()
if not WEBHOOK_URL:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω WEBHOOK_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://<service>.onrender.com/telegram)")

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip() or None

PORT = int(os.getenv("PORT", "10000"))
HOST = "0.0.0.0"

# ---------------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ----------------------------

# aiogram >= 3.7: parse_mode –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ DefaultBotProperties
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ---------------------------- –ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ –ë–î) ----------------------------

# –ë—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–æ–≤: media_group_id -> (—Å–ø–∏—Å–æ–∫ Message, task)
_album_buffers: Dict[str, Tuple[List[Message], Optional[asyncio.Task]]] = {}

# –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –º–µ–¥–∏–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: token -> –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞
# –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –¥–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
_pending_albums: Dict[str, Dict] = {}

# ---------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------------

SAMPLE_TEXT = (
    "üìù <b>–û–±—Ä–∞–∑–µ—Ü –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\\n"
    "–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ü—Ä–æ–¥–∞–∂–∞ –ª—ã–∂ Fischer Speedmax 3D Skate\\n"
    "–û–ø–∏—Å–∞–Ω–∏–µ:\\n"
    "–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/—É, –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\\n"
    "–†–∞–∑–º–µ—Ä: 186 —Å–º\\n"
    "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: 2022\\n"
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫—Ä–µ–ø–ª–µ–Ω–∏—è Rottefella Xcelerator\\n"
    "–¶–µ–Ω–∞: 25 000 ‚ÇΩ\\n"
    "–ê–¥—Ä–µ—Å: –î–º–∏—Ç—Ä–æ–≤\\n"
    "–ö–æ–Ω—Ç–∞–∫—Ç—ã: @username –∏–ª–∏ +7 912 345-67-89\\n"
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: [–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ 3-—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ]"
)

def moderation_keyboard(data: str) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{data}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{data}")
    kb.adjust(2)
    return kb

async def notify_admins(text: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º
            pass

async def send_single_for_moderation(msg: Message):
    """
    –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏.
    –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º copy_message –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    from_chat_id = msg.chat.id
    message_id = msg.message_id

    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∞–º–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É(–∞–º)
    for admin_id in ADMIN_IDS:
        try:
            await bot.copy_message(chat_id=admin_id, from_chat_id=from_chat_id, message_id=message_id)
        except Exception:
            pass

        # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        kb = moderation_keyboard(f"single:{from_chat_id}:{message_id}")
        preview = (
            f"üßæ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\\n"
            f"–û—Ç: <code>{from_chat_id}</code> ‚Ä¢ msg_id: <code>{message_id}</code>\\n\\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
        )
        try:
            await bot.send_message(admin_id, preview, reply_markup=kb.as_markup())
        except Exception:
            pass

async def flush_album(media_group_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º–æ–≤ –∞–¥–º–∏–Ω—É(–∞–º) –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    """
    buffer_entry = _album_buffers.pop(media_group_id, None)
    if not buffer_entry:
        return
    items, _ = buffer_entry
    if not items:
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É –∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    medias_for_admin = []
    medias_for_channel = []
    caption_used = False
    album_type = None  # "photo" / "video" / "mixed"
    for m in items:
        caption = m.caption if (m.caption and not caption_used) else None
        if m.photo:
            file_id = m.photo[-1].file_id
            medias_for_admin.append(InputMediaPhoto(media=file_id, caption=caption))
            medias_for_channel.append(("photo", file_id, caption))
            album_type = "photo" if album_type in (None, "photo") else "mixed"
        elif m.video:
            file_id = m.video.file_id
            medias_for_admin.append(InputMediaVideo(media=file_id, caption=caption))
            medias_for_channel.append(("video", file_id, caption))
            album_type = "video" if album_type in (None, "video") else "mixed"
        caption_used = caption_used or bool(caption)

    token = uuid.uuid4().hex[:16]
    _pending_albums[token] = {
        "from_chat_id": items[0].chat.id,
        "media": medias_for_channel,  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π ("photo"/"video", file_id, caption|None)
        "album_type": album_type,
        "used": False,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω—É(–∞–º)
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_media_group(chat_id=admin_id, media=medias_for_admin)
        except Exception:
            pass

        # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        kb = moderation_keyboard(f"album:{token}")
        preview = (
            f"üßæ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–∞–ª—å–±–æ–º) –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>\\n"
            f"–û—Ç: <code>{items[0].chat.id}</code> ‚Ä¢ media_group: <code>{media_group_id}</code>\\n\\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é."
        )
        try:
            await bot.send_message(admin_id, preview, reply_markup=kb.as_markup())
        except Exception:
            pass

# ---------------------------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------------------------

@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É. "
        "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–∞–Ω–∞–ª.\\n\\n" + SAMPLE_TEXT
    )

# –ê–ª—å–±–æ–º—ã (media_group)
@router.message(F.media_group_id)
async def on_album_piece(message: Message):
    mgid = str(message.media_group_id)
    bucket, task = _album_buffers.get(mgid, ([], None))
    bucket.append(message)
    if task is None:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤–µ—Å—å –∞–ª—å–±–æ–º
        task = asyncio.create_task(_schedule_album_flush(mgid))
    _album_buffers[mgid] = (bucket, task)

async def _schedule_album_flush(media_group_id: str, delay: float = 1.2):
    await asyncio.sleep(delay)
    await flush_album(media_group_id)

# –§–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
@router.message(F.photo & ~F.media_group_id)
async def on_single_photo(message: Message):
    await send_single_for_moderation(message)

@router.message(F.video & ~F.media_group_id)
async def on_single_video(message: Message):
    await send_single_for_moderation(message)

# –¢–µ–∫—Å—Ç
@router.message(F.text & ~F.via_bot)
async def on_text(message: Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–∫—Ä–æ–º–µ /start)
    if message.text.startswith("/"):
        return
    await send_single_for_moderation(message)

# –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ‚Äî –æ–¥–æ–±—Ä–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("approve:"))
async def on_approve(callback: CallbackQuery):
    """
    –§–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö:
      approve:single:<from_chat_id>:<message_id>
      approve:album:<token>
    """
    try:
        payload = callback.data.split(":", 1)[1]
        kind, rest = payload.split(":", 1)
        if kind == "single":
            # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–ø–∏–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            from_chat_id_str, msg_id_str = rest.split(":")
            from_chat_id = int(from_chat_id_str)
            msg_id = int(msg_id_str)
            await bot.copy_message(chat_id=CHANNEL_ID, from_chat_id=from_chat_id, message_id=msg_id)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await callback.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")
            try:
                await bot.send_message(from_chat_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
            except Exception:
                pass
        elif kind == "album":
            token = rest
            data = _pending_albums.get(token)
            if not data or data.get("used"):
                await callback.answer("–£—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", show_alert=True)
                return
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
            medias = []
            caption_used = False
            for media_type, file_id, caption in data["media"]:
                caption_to_use = caption if (caption and not caption_used) else None
                if media_type == "photo":
                    medias.append(InputMediaPhoto(media=file_id, caption=caption_to_use))
                else:
                    medias.append(InputMediaVideo(media=file_id, caption=caption_to_use))
                caption_used = caption_used or bool(caption_to_use)
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            await bot.send_media_group(chat_id=CHANNEL_ID, media=medias)
            data["used"] = True
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await callback.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")
            try:
                await bot.send_message(data["from_chat_id"], "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–∞–ª—å–±–æ–º) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
            except Exception:
                pass
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.", show_alert=True)
            return
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", show_alert=True)

# –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("reject:"))
async def on_reject(callback: CallbackQuery):
    """
    –§–æ—Ä–º–∞—Ç—ã:
      reject:single:<from_chat_id>:<message_id>
      reject:album:<token>
    """
    try:
        payload = callback.data.split(":", 1)[1]
        kind, rest = payload.split(":", 1)
        if kind == "single":
            from_chat_id = int(rest.split(":")[0])
            try:
                await bot.send_message(from_chat_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
        elif kind == "album":
            token = rest
            data = _pending_albums.get(token)
            if data and not data.get("used"):
                try:
                    await bot.send_message(data["from_chat_id"], "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–∞–ª—å–±–æ–º) –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
                except Exception:
                    pass
                data["used"] = True
        await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)

# ---------------------------- AIOHTTP (Webhook) ----------------------------

async def on_startup_app(_: web.Application):
    # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
    try:
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            secret_token=WEBHOOK_SECRET,
        )
        # –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ:
        await notify_admins("üîî –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception:
        pass

async def on_shutdown_app(_: web.Application):
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        pass

async def healthcheck(_: web.Request):
    return web.Response(text="OK")

def build_app() -> web.Application:
    app = web.Application()
    app.on_startup.append(on_startup_app)
    app.on_shutdown.append(on_shutdown_app)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä Telegram webhook
    req_handler = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET)
    # –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å WEBHOOK_URL (–æ–∫–æ–Ω—á–∞–Ω–∏–µ)
    # –ù–∞–ø—Ä–∏–º–µ—Ä: WEBHOOK_URL = https://<service>.onrender.com/telegram
    req_handler.register(app, path="/telegram")

    # Healthcheck
    app.router.add_get("/", healthcheck)
    app.router.add_get("/health", healthcheck)

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å aiogram (graceful shutdown)
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    web.run_app(build_app(), host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
